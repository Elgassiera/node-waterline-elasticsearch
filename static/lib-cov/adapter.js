/* automatically generated by JSCoverage - do not edit */
if (typeof _$jscoverage === 'undefined') _$jscoverage = {};
if (! _$jscoverage['adapter.js']) {
  _$jscoverage['adapter.js'] = [];
  _$jscoverage['adapter.js'][9] = 0;
  _$jscoverage['adapter.js'][12] = 0;
  _$jscoverage['adapter.js'][37] = 0;
  _$jscoverage['adapter.js'][44] = 0;
  _$jscoverage['adapter.js'][48] = 0;
  _$jscoverage['adapter.js'][50] = 0;
  _$jscoverage['adapter.js'][51] = 0;
  _$jscoverage['adapter.js'][52] = 0;
  _$jscoverage['adapter.js'][54] = 0;
  _$jscoverage['adapter.js'][55] = 0;
  _$jscoverage['adapter.js'][56] = 0;
  _$jscoverage['adapter.js'][60] = 0;
  _$jscoverage['adapter.js'][71] = 0;
  _$jscoverage['adapter.js'][74] = 0;
  _$jscoverage['adapter.js'][79] = 0;
  _$jscoverage['adapter.js'][81] = 0;
  _$jscoverage['adapter.js'][104] = 0;
  _$jscoverage['adapter.js'][115] = 0;
  _$jscoverage['adapter.js'][118] = 0;
  _$jscoverage['adapter.js'][122] = 0;
  _$jscoverage['adapter.js'][123] = 0;
  _$jscoverage['adapter.js'][124] = 0;
  _$jscoverage['adapter.js'][126] = 0;
  _$jscoverage['adapter.js'][127] = 0;
  _$jscoverage['adapter.js'][128] = 0;
  _$jscoverage['adapter.js'][132] = 0;
  _$jscoverage['adapter.js'][143] = 0;
  _$jscoverage['adapter.js'][145] = 0;
  _$jscoverage['adapter.js'][147] = 0;
  _$jscoverage['adapter.js'][148] = 0;
  _$jscoverage['adapter.js'][149] = 0;
  _$jscoverage['adapter.js'][150] = 0;
  _$jscoverage['adapter.js'][152] = 0;
  _$jscoverage['adapter.js'][153] = 0;
  _$jscoverage['adapter.js'][155] = 0;
  _$jscoverage['adapter.js'][157] = 0;
  _$jscoverage['adapter.js'][161] = 0;
  _$jscoverage['adapter.js'][178] = 0;
  _$jscoverage['adapter.js'][180] = 0;
  _$jscoverage['adapter.js'][181] = 0;
  _$jscoverage['adapter.js'][184] = 0;
  _$jscoverage['adapter.js'][187] = 0;
  _$jscoverage['adapter.js'][196] = 0;
  _$jscoverage['adapter.js'][199] = 0;
  _$jscoverage['adapter.js'][208] = 0;
  _$jscoverage['adapter.js'][210] = 0;
  _$jscoverage['adapter.js'][211] = 0;
  _$jscoverage['adapter.js'][215] = 0;
  _$jscoverage['adapter.js'][233] = 0;
  _$jscoverage['adapter.js'][235] = 0;
  _$jscoverage['adapter.js'][238] = 0;
  _$jscoverage['adapter.js'][247] = 0;
  _$jscoverage['adapter.js'][250] = 0;
  _$jscoverage['adapter.js'][259] = 0;
  _$jscoverage['adapter.js'][262] = 0;
  _$jscoverage['adapter.js'][271] = 0;
  _$jscoverage['adapter.js'][274] = 0;
  _$jscoverage['adapter.js'][289] = 0;
  _$jscoverage['adapter.js'][292] = 0;
  _$jscoverage['adapter.js'][308] = 0;
  _$jscoverage['adapter.js'][311] = 0;
  _$jscoverage['adapter.js'][320] = 0;
  _$jscoverage['adapter.js'][323] = 0;
  _$jscoverage['adapter.js'][332] = 0;
  _$jscoverage['adapter.js'][335] = 0;
  _$jscoverage['adapter.js'][347] = 0;
  _$jscoverage['adapter.js'][369] = 0;
  _$jscoverage['adapter.js'][384] = 0;
  _$jscoverage['adapter.js'][386] = 0;
  _$jscoverage['adapter.js'][389] = 0;
  _$jscoverage['adapter.js'][395] = 0;
  _$jscoverage['adapter.js'][396] = 0;
  _$jscoverage['adapter.js'][399] = 0;
}
_$jscoverage['adapter.js'][9]++;
function adapter(settings, fn) {
  _$jscoverage['adapter.js'][12]++;
  Object.defineProperties(this, {identity: {value: require("../package").name, enumerable: true}, syncable: {value: true, enumerable: true}, defaults: {value: {host: "localhost", port: 9200, auth: null}, enumerable: true, writable: true}, connection: {value: undefined, enumerable: true}});
  _$jscoverage['adapter.js'][37]++;
  return this;
}
_$jscoverage['adapter.js'][44]++;
Object.defineProperties(adapter.prototype, {create: {value: (function create(collectionName, data, cb) {
  _$jscoverage['adapter.js'][48]++;
  adapter.debug("create( %s )", collectionName);
  _$jscoverage['adapter.js'][50]++;
  var type = data.type;
  _$jscoverage['adapter.js'][51]++;
  var body = data.body[0];
  _$jscoverage['adapter.js'][52]++;
  var options = data.body.length === 2? body[1]: null;
  _$jscoverage['adapter.js'][54]++;
  this.connection.index(collectionName, type, body, options, (function (error, response) {
  _$jscoverage['adapter.js'][55]++;
  if (error) {
    _$jscoverage['adapter.js'][55]++;
    return cb(error, null);
  }
  _$jscoverage['adapter.js'][56]++;
  cb(null, response);
}));
  _$jscoverage['adapter.js'][60]++;
  return this;
}), enumerable: true, configurable: true, writable: true}, find: {value: (function find(collectionName, options, cb) {
  _$jscoverage['adapter.js'][71]++;
  adapter.debug("find( %s )", collectionName);
  _$jscoverage['adapter.js'][74]++;
  this.connection.search({index: collectionName}, (function (error, response) {
  _$jscoverage['adapter.js'][79]++;
  if (error) {
    _$jscoverage['adapter.js'][79]++;
    cb(error, null);
  }
  _$jscoverage['adapter.js'][81]++;
  cb(null, response.hits);
}));
  _$jscoverage['adapter.js'][104]++;
  return this;
}), enumerable: true, configurable: true, writable: true}, update: {value: (function update(collectionName, options, values, cb) {
  _$jscoverage['adapter.js'][115]++;
  adapter.debug("update( %s )", collectionName);
  _$jscoverage['adapter.js'][118]++;
  console.log("You're a dirty a whore");
  _$jscoverage['adapter.js'][122]++;
  var type = data.type;
  _$jscoverage['adapter.js'][123]++;
  var body = data.body[0];
  _$jscoverage['adapter.js'][124]++;
  var options = data.body[1];
  _$jscoverage['adapter.js'][126]++;
  this.connection.index(collectionname, type, body, options, (function (error, response) {
  _$jscoverage['adapter.js'][127]++;
  if (error) {
    _$jscoverage['adapter.js'][127]++;
    return cb(error, null);
  }
  _$jscoverage['adapter.js'][128]++;
  cb(null, response);
}));
  _$jscoverage['adapter.js'][132]++;
  return this;
}), enumerable: true, configurable: true, writable: true}, destroy: {value: (function destroy(collectionName, options, cb) {
  _$jscoverage['adapter.js'][143]++;
  adapter.debug("destroy( %s )", collectionName);
  _$jscoverage['adapter.js'][145]++;
  var opts = options.where;
  _$jscoverage['adapter.js'][147]++;
  var index = collectionName;
  _$jscoverage['adapter.js'][148]++;
  var type = opts.type;
  _$jscoverage['adapter.js'][149]++;
  var id = opts.id;
  _$jscoverage['adapter.js'][150]++;
  var options = opts.options? opts.options: null;
  _$jscoverage['adapter.js'][152]++;
  this.connection["delete"](index, type, id, options, (function (error, response) {
  _$jscoverage['adapter.js'][153]++;
  if (error) {
    _$jscoverage['adapter.js'][153]++;
    cb(error, null);
  }
  _$jscoverage['adapter.js'][155]++;
  console.log(response);
  _$jscoverage['adapter.js'][157]++;
  cb(null, response);
}));
  _$jscoverage['adapter.js'][161]++;
  return this;
}), enumerable: true, configurable: true, writable: true}, registerCollection: {value: (function registerCollection(collection, cb) {
  _$jscoverage['adapter.js'][178]++;
  adapter.debug("registerCollection()");
  _$jscoverage['adapter.js'][180]++;
  if ("undefined" === typeof this.connection) {
    _$jscoverage['adapter.js'][181]++;
    return adapter.createConnection.call(this, collection.config || {}, cb);
  }
  _$jscoverage['adapter.js'][184]++;
  cb();
  _$jscoverage['adapter.js'][187]++;
  return this;
}), enumerable: true, configurable: true, writable: true}, teardown: {value: (function teardown(cb) {
  _$jscoverage['adapter.js'][196]++;
  adapter.debug("teardown()");
  _$jscoverage['adapter.js'][199]++;
  return this;
}), enumerable: true, configurable: true, writable: true}, describe: {value: (function describe(collectionName, cb) {
  _$jscoverage['adapter.js'][208]++;
  adapter.debug("describe( %s )", collectionName);
  _$jscoverage['adapter.js'][210]++;
  this.connection.getMapping("_all", (function (error, data) {
  _$jscoverage['adapter.js'][211]++;
  cb(null, data.properties);
}));
  _$jscoverage['adapter.js'][215]++;
  return this;
}), enumerable: true, configurable: true, writable: true}, define: {value: (function define(collectionName, definition, cb) {
  _$jscoverage['adapter.js'][233]++;
  adapter.debug("define( %s )", collectionName, definition);
  _$jscoverage['adapter.js'][235]++;
  cb(null, {});
  _$jscoverage['adapter.js'][238]++;
  return this;
}), enumerable: true, configurable: true, writable: true}, drop: {value: (function drop(collectionName, cb) {
  _$jscoverage['adapter.js'][247]++;
  adapter.debug("drop( %s )", collectionName);
  _$jscoverage['adapter.js'][250]++;
  return this;
}), enumerable: true, configurable: true, writable: true}, native: {value: (function _native(collection, cb) {
  _$jscoverage['adapter.js'][259]++;
  adapter.debug("native()");
  _$jscoverage['adapter.js'][262]++;
  return this;
}), enumerable: true, configurable: true, writable: true}, createEach: {value: (function createEach(collectionName, data, cb) {
  _$jscoverage['adapter.js'][271]++;
  adapter.debug("createEach( %s )", collectionName);
  _$jscoverage['adapter.js'][274]++;
  return this;
}), enumerable: true, configurable: true, writable: true}, stream: {value: (function stream(collectionName, options, stream) {
  _$jscoverage['adapter.js'][289]++;
  adapter.debug("stream( %s )", collectionName);
  _$jscoverage['adapter.js'][292]++;
  return this;
}), enumerable: true, configurable: true, writable: true}, query: {value: (function query(collectionName, query, data, cb) {
  _$jscoverage['adapter.js'][308]++;
  adapter.debug("query( %s )", collectionName);
  _$jscoverage['adapter.js'][311]++;
  return this;
}), enumerable: true, configurable: true, writable: true}, addAttribute: {value: (function addAttribute(collectionName, attrName, attrDef, cb) {
  _$jscoverage['adapter.js'][320]++;
  adapter.debug("addAttribute( %s )", collectionName);
  _$jscoverage['adapter.js'][323]++;
  return this;
}), enumerable: true, configurable: true, writable: true}, removeAttribute: {value: (function removeAttribute(collectionName, attrName, cb) {
  _$jscoverage['adapter.js'][332]++;
  adapter.debug("removeAttribute( %s )", collectionName);
  _$jscoverage['adapter.js'][335]++;
  return this;
}), enumerable: true, configurable: true, writable: true}});
_$jscoverage['adapter.js'][347]++;
Object.defineProperties(module.exports = adapter, {defaults: {value: {host: "localhost", port: 9200, schema: false, nativeParser: false, safe: true, url: null}, enumerable: true, configurable: true, writable: true}, create: {value: (function create(settings, fn) {
  _$jscoverage['adapter.js'][369]++;
  return new adapter(settings, fn);
}), enumerable: true, configurable: true, writable: true}, createConnection: {value: (function createConnection(config, cb) {
  _$jscoverage['adapter.js'][384]++;
  adapter.debug("registerCollection()");
  _$jscoverage['adapter.js'][386]++;
  var elastical = require("elastical");
  _$jscoverage['adapter.js'][389]++;
  this.connection = new elastical.Client(config.url, {port: config.port || 9200, auth: config.auth || null});
  _$jscoverage['adapter.js'][395]++;
  this.connection.getMapping("_all", (function (error, data) {
  _$jscoverage['adapter.js'][396]++;
  cb(error, data? data.properties: null);
}));
  _$jscoverage['adapter.js'][399]++;
  return this;
}), enumerable: true, configurable: true, writable: true}, debug: {value: require("debug")("waterline:elasticsearch"), enumerable: true, configurable: true, writable: true}, utility: {value: require("./utility"), enumerable: true, configurable: true, writable: true}});
_$jscoverage['adapter.js'].source = ["/**"," * Waterline ElasticSearch adapter"," *"," * @param settings"," * @param fn"," * @returns {*}"," * @constructor"," */","function adapter( settings, fn ) {","","  // Configure dynamic settings.","  Object.defineProperties( this, {","    identity: {","      value: require( '../package' ).name,","      enumerable: true","    },","    syncable: {","      value: true,","      enumerable: true","    },","    defaults: {","      value: {","        host: 'localhost',","        port: 9200,","        auth: null","      },","      enumerable: true,","      writable: true","    },","    connection: {","      value: undefined,","      enumerable: true","    }","  });","","  // @chainable","  return this;","}","","/**"," * adapter Instance methods."," *"," */","Object.defineProperties( adapter.prototype, {","","  create: {","    value: function create( collectionName, data, cb ) {","      adapter.debug( 'create( %s )', collectionName );","","      var type    = data.type;","      var body    = data.body[0];","      var options = data.body.length === 2 ? body[1] : null;","","      this.connection.index( collectionName, type, body, options, function( error, response ) {","        if ( error ) return cb( error, null );","        cb( null, response );","      });","","      // @chainable","      return this;","    },","    enumerable: true,","    configurable: true,","    writable: true","  },","","","","  find: {","    value: function find( collectionName, options, cb ) {","      adapter.debug( 'find( %s )', collectionName );","","","      this.connection.search( {","","        index: collectionName","","      }, function( error, response ) {","        if ( error ) cb( error, null );","","        cb( null, response.hits );","      });","","","","","","/*","      var opts    = options.where;","      var results = [];","","      var index   = collectionName;","      var id      = opts.id;","","","      this.connection.get( index, id, function( error, response ) {","        if ( error ) cb( error, null );","        value.push( response );","        cb( null, results );","      });","*/","","      // @chainable","      return this;","    },","    enumerable: true,","    configurable: true,","    writable: true","  },","","","","  update: {","    value: function update( collectionName, options, values, cb ) {","      adapter.debug( 'update( %s )', collectionName );","","","console.log( 'You\\'re a dirty a whore' );","","","","      var type    = data.type;","      var body    = data.body[0];","      var options = data.body[1];","","      this.connection.index( collectionname, type, body, options, function( error, response ) {","        if ( error ) return cb( error, null );","        cb( null, response );","      });","","      // @chainable","      return this;","    },","    enumerable: true,","    configurable: true,","    writable: true","  },","","","","  destroy: {","    value: function destroy( collectionName, options, cb ) {","      adapter.debug( 'destroy( %s )', collectionName );","","      var opts    = options.where;","","      var index   = collectionName;","      var type    = opts.type;","      var id      = opts.id;","      var options = opts.options ? opts.options : null;","","      this.connection.delete( index, type, id, options, function ( error, response ) {","        if ( error ) cb( error, null );","","        console.log( response );","","        cb( null, response );","      });","","      // @chainable","      return this;","    },","    enumerable: true,","    configurable: true,","    writable: true","  },","","","","  registerCollection: {","    /**","     *","     * @param collection","     * @param cb","     * @returns {*}","     */","    value: function registerCollection( collection, cb ) {","      adapter.debug( 'registerCollection()' );","","      if( 'undefined' === typeof this.connection ) {","        return adapter.createConnection.call( this, collection.config || {}, cb );","      }","","      cb();","","      // @chainable","      return this;","","    },","    enumerable: true,","    configurable: true,","    writable: true","  },","  teardown: {","    value: function teardown( cb ) {","      adapter.debug( 'teardown()' );","","      // @chainable","      return this;","","    },","    enumerable: true,","    configurable: true,","    writable: true","  },","  describe: {","    value: function describe( collectionName, cb ) {","      adapter.debug( 'describe( %s )', collectionName );","","      this.connection.getMapping( '_all', function( error, data ) {","        cb( null, data.properties )","      });","","      // @chainable","      return this;","","    },","    enumerable: true,","    configurable: true,","    writable: true","  },","  define: {","    /**","     * Model Defined.","     *","     *","     * @param collectionName {String} Name taken from tableName, it seems.","     * @param definition {Object} Schema.","     * @param cb","     * @returns {*}","     */","    value: function define( collectionName, definition, cb ) {","      adapter.debug( 'define( %s )', collectionName, definition );","","      cb( null, {} );","","      // @chainable","      return this;","","    },","    enumerable: true,","    configurable: true,","    writable: true","  },","  drop: {","    value: function drop( collectionName, cb ) {","      adapter.debug( 'drop( %s )', collectionName );","","      // @chainable","      return this;","","    },","    enumerable: true,","    configurable: true,","    writable: true","  },","  native: {","    value: function _native( collection, cb ) {","      adapter.debug( 'native()' );","","      // @chainable","      return this;","","    },","    enumerable: true,","    configurable: true,","    writable: true","  },","  createEach: {","    value: function createEach( collectionName, data, cb ) {","      adapter.debug( 'createEach( %s )', collectionName );","","      // @chainable","      return this;","","    },","    enumerable: true,","    configurable: true,","    writable: true","  },","  stream: {","    /**","     *","     * @param collectionName","     * @param options","     * @param stream","     */","    value: function stream( collectionName, options, stream ) {","      adapter.debug( 'stream( %s )', collectionName );","","      // @chainable","      return this;","","    },","    enumerable: true,","    configurable: true,","    writable: true","  },","  query: {","    /**","     *","     * @param collectionName","     * @param query","     * @param data","     * @param cb","     */","    value: function query( collectionName, query, data, cb ) {","      adapter.debug( 'query( %s )', collectionName );","","      // @chainable","      return this;","","    },","    enumerable: true,","    configurable: true,","    writable: true","  },","  addAttribute: {","    value: function addAttribute( collectionName, attrName, attrDef, cb ) {","      adapter.debug( 'addAttribute( %s )', collectionName );","","      // @chainable","      return this;","","    },","    enumerable: true,","    configurable: true,","    writable: true","  },","  removeAttribute: {","    value: function removeAttribute( collectionName, attrName, cb ) {","      adapter.debug( 'removeAttribute( %s )', collectionName );","","      // @chainable","      return this;","","    },","    enumerable: true,","    configurable: true,","    writable: true","  }","});","","/**"," * adapter Constructor methods."," */","Object.defineProperties( module.exports = adapter, {","  defaults: {","    value: {","      host: 'localhost',","      port: 9200,","      schema: false,","      nativeParser: false,","      safe: true,","      url: null","    },","    enumerable: true,","    configurable: true,","    writable: true","  },","  create: {","    /**","     * Instantiation helper.","     *","     * @param settings","     * @returns {adapter}","     */","    value: function create( settings, fn ) {","      return new adapter( settings, fn );","    },","    enumerable: true,","    configurable: true,","    writable: true","  },","  createConnection: {","    /**","     * Connect to ElasticSearch","     *","     * @private","     * @param config","     * @param cb","     */","    value: function createConnection( config, cb ) {","      adapter.debug( 'registerCollection()' );","","      var elastical = require( 'elastical' );","","      // Instantiate Elastical client.","      this.connection = new elastical.Client( config.url, {","        port: config.port || 9200,","        auth: config.auth || null","      });","","      // Make simple request to verify connectivity.","      this.connection.getMapping( '_all', function( error, data ) {","        cb( error, data ? data.properties : null )","      });","","      return this;","    },","    enumerable: true,","    configurable: true,","    writable: true","  },","  debug: {","    value: require( 'debug' )( 'waterline:elasticsearch' ),","    enumerable: true,","    configurable: true,","    writable: true","  },","  utility: {","    value: require( './utility' ),","    enumerable: true,","    configurable: true,","    writable: true","  }","});"];
